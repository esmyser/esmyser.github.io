<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Smyser Grows Wiser]]></title>
  <link href="http://esmyser.github.io/atom.xml" rel="self"/>
  <link href="http://esmyser.github.io/"/>
  <updated>2015-06-25T20:52:28-04:00</updated>
  <id>http://esmyser.github.io/</id>
  <author>
    <name><![CDATA[Ezra Smyser]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Won't Somebody Please Think of the Children?!]]></title>
    <link href="http://esmyser.github.io/blog/2015/06/25/wont-somebody-please-think-of-the-children/"/>
    <updated>2015-06-25T20:35:25-04:00</updated>
    <id>http://esmyser.github.io/blog/2015/06/25/wont-somebody-please-think-of-the-children</id>
    <content type="html"><![CDATA[<h4>save the parents first</h4>


<p>This week we’ve been playing with Active Record. It’s pretty powerful. So far, it’s allowed us to perform basic database procedures through Ruby. You can set up your whole database without writing a single line of SQL. It’s got a bunch of slick conventions that could merit their own blog posts (classes' file names get converted to methods, ActiveRecord_Associations_CollectionProxy masquerade as arrays; activeRecord’s a weird place). But what I’ve enjoyed most about Active Record is that it puts your classes on steroids.</p>

<p>You can instantiate instances of other classes from within a class, and establish their connection to each other all in one line of code. The class can reach across to other classes and mess around with them.</p>

<p>Imagine we’re writing a database for a library. We have books and authors. Each author has_many :books, and each book belongs_to an :author.</p>

<pre><code>
class Book < ActiveRecord::Base
  belongs_to :author
end
</code></pre>


<pre><code>
class Author < ActiveRecord::Base
  has_many :books
end
</code></pre>


<p>Using belongs_to and has_many, we’ve given the classes a whole new host of methods. Book instances, belonging to Authors, can now:</p>

<ul>
  <li>author </li> 
  <li>author= </li>
  <li>build_author </li>
  <li>create_author </li>
  <li>create_author! </li>
</ul>


<p>Author instances, having many books, can now:</p>

<ul>
  <li>books(force_reload = false)</li>
  <li>books<<(object, ...)</li>
  <li>books.delete(object, ...)</li>
  <li>books.destroy(object, ...)</li>
  <li>books=(objects)</li>
  <li>books_singular_ids</li>
  <li>books_singular_ids=(ids)</li>
  <li>books.clear</li>
  <li>books.empty?</li>
  <li>books.size</li>
  <li>books.find(...)</li>
  <li>books.where(...)</li>
  <li>books.exists?(...)</li>
  <li>books.build(attributes = {}, ...)</li>
  <li>books.create(attributes = {})</li>
  <li>books.create!(attributes = {})</li>
</ul>


<p>That’s a lot of new functionality from Active Record (though actually, having touched briefly on Rails today, relatively, it’s not that much). If you’re curious what they all do, check out <a href = http://edgeguides.rubyonrails.org/association_basics.html>this page</a>.</p>

<p>So let’s say we want to create a new author and a book, and make sure that they’re properly related to each other. We can write:</p>

<pre><code>
pkd = Author.new(name: ‘Phillip K. Dick’)
android = pkd.books.build(title: ‘Do Androids Dream of Electric Sheep’)
pkd.save
=> true

android.persisted?
=> true
</code></pre>


<p>In three lines we have created an author memory using .new, created a book in memory using .build, and added them to the database using .save. Behind the scenes, we assigned the book to belong to the author via an author_id, made the author own the book via a book_id, and saved the book to the database. That’s a ton of work being done by Active Record. I want to investigate the parent-children, one-to-many, has_many / belongs_to relationship.</p>

<p>When we saved the Author pkd, we also saved the book we created. This is pretty handy. We only have to save one object, and automatically it and all of its children are saved to the database. If we had added more books to pkd, we would have saved them as well.</p>

<p>But what if we save the book, and not the author?</p>

<pre><code>
pkd = Author.new(name: “Phillip K Dick”)
android = pkd.books.build(title: ‘Do Androids Dream of Electric Sheep’)
stigmata = pd.books.build(title: ‘The Three Stigmata of Palmer Eldritch’)
android.save

pkd.persisted?
=> true

stigmata.persisted?
=> true
</code></pre>


<p>Once again, all three of the objects we created are saved in memory and in the databse. Beautiful.</p>

<p>So we can always save one object in a parent-child relationship and all of the children and the parent will be saved right? Unfortunately, no - not right. Let’s look at the inverse of the above: when the book creates the author — when the child creates the parent.</p>

<pre><code>
android = Book.new(title: ‘Do Androids Dream of Electric Sheep’)
pkd = android.build_author(name: “Phillip K Dick”)
android.save

pkd.persisted?
=> false
</code></pre>


<p>Here we created a book in line 1, used the book to create an author and establish their relationship in line 2, and saved the book in line 3. Yet if we looked at the objects, only the book would be saved in the database, while the author would remain in memory. It’s an odd edge case, but one to look out for.</p>

<p>So when you’re saving your parents and children to the database, think of the database like an airplane. If there’s ever an emergency, you should put oxygen on yourself first before saving your children. ActiveRecord is the same: save the parents first, so they can save the children. Won’t you please think of the children?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Expressive Code]]></title>
    <link href="http://esmyser.github.io/blog/2015/06/14/enumerators-human-centeric-code/"/>
    <updated>2015-06-14T15:40:37-04:00</updated>
    <id>http://esmyser.github.io/blog/2015/06/14/enumerators-human-centeric-code</id>
    <content type="html"><![CDATA[<p>Two weeks ago I started learning Ruby at the Flatiron School. In that time we’ve gone over the basics of the language. One of the things that I love about Flatiron is that they teach the mechanics behind the language and the thinking behind the mechanics. When I was teaching myself, I was able to make things work, but I didn’t necessarily understand how or why they worked.</p>

<p>Ruby is a very expressive language. Its expressiveness comes from its creator’s human-centric philosophy about the purpose of programming languages: that they should be built to serve the people that use them, rather than the machines that take their orders. To quote <a href="http://mislav.uniqpath.com/poignant-guide/book/chapter-3.html">_why</a>, &ldquo;We can no longer truthfully call it a computer language. It is coderspeak. It is the language of our thoughts.”</p>

<p>After just two weeks, I’ve already been having odd dreams where the Each enumerator repeats like a mantra throughout. Each… do. Each… do. At the height of my struggles iterating through nested hashes, I dreamt I was hosting a get together at my apartment. Each person. Do greet if not_greeted == true. Each person. Do favorite_drink. guests.each { |guest| guest += favorite_drink }.</p>

<p>I’m only just beginning to get familiar with Ruby, but I’ve learned that part of its simplicity and human-readability-ness comes from abstraction and syntax. The more we can abstract away and compartmentalize the levers that make our code work, the better our code will read. And ultimately, code is not just for computers. It’s also for the people that have to write it, read it, and improve upon it. In Ruby, Enumerators allow us to, among other things, hide the plumbing of our code and replace it with simpler statements.</p>

<p>Take Each, the enumerator that&rsquo;s invaded my dreams. Each takes a collection of data and loops through each of its individual data points, allowing us to perform an action using every piece of data individually. Keeping with the example from my dream, let’s say I have an array of guests [“John”, “Paul”, “George”, “Ringo"], and I want to make sure that my program says “Hi” to each of them. My code will have to go into the array of guests, choose the person that I want to greet, greet them, and repeat until all of the guests have been greeted. Without enumerators, my code would look like this:</p>

<pre><code>
# simple iteration
i = 0
while i < guests.count
  puts “Hi #{guests[i]}!”
  i += 1
end
</code></pre>


<p>I have to set an index to keep track of which guest I’m greeting and how many guests I’ve greeted. The code explicitly increments the index after saying hi to each guest.</p>

<p>Performing the same task with the Each enumerator allows me to abstract out the index and incrementation because Each keeps track of the counting for me. It looks like this:</p>

<pre><code>
# iteration with each
guests.each do |guest|
  puts “Hi #{guest}!”
end
</code></pre>


<p>Much simpler. I went from 5 lines of code to three, and in the process we removed the explicit incrementation. It’s also much easier to read. So how does Each work?</p>

<p>Each leverages Blocks and Yield. Behind the scenes, Each is keeping track of how many items it’s iterating through, and passing the data from each iteration through to a separate set of actions defined by the block (the area between do and end above). Written out, Each on its own looks something like this:</p>

<pre><code>
# mechanics of each
i = 0
while i < data.count
  yield
  i += 1
end
</code></pre>


<p>Here we have the same counter as before, and the only thing that’s happening besides incrementing the counter is that we’re calling yield. Yield sends the data to a Block (the do … end statement) where another set of code is enacted. In our example, each is being called on guests and passing each guest through to the block we define (do |guest| “puts &lsquo;Hi #{guest}!’” end). This is the beauty of enumerators. All of this happens behind the scenes - we’ve abstracted out the incrementation to create a much simpler operation: Each. Ultimately, enumerators are powerful because they make code simpler and thereby easier to read, manage, and write.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Post]]></title>
    <link href="http://esmyser.github.io/blog/2015/06/02/first-post/"/>
    <updated>2015-06-02T14:41:09-04:00</updated>
    <id>http://esmyser.github.io/blog/2015/06/02/first-post</id>
    <content type="html"><![CDATA[<p>&ldquo;Hello world!&rdquo;</p>
]]></content>
  </entry>
  
</feed>
